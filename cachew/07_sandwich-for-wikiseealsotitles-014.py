# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_sandwich-for-wikiseealsotitles.ipynb.

# %% auto 0
__all__ = []

# %% ../nbs/07_sandwich-for-wikiseealsotitles.ipynb 3
import os
os.environ['HIP_VISIBLE_DEVICES'] = '0,1,2,3'

import torch,json, torch.multiprocessing as mp, joblib, numpy as np, scipy.sparse as sp

from xcai.basics import *
from xcai.models.sandwich import SAW002, SandwichConfig

# %% ../nbs/07_sandwich-for-wikiseealsotitles.ipynb 5
os.environ['WANDB_PROJECT'] = 'sandwich_00-wikiseealsotitles-02'

from typing import Optional
from fastcore.utils import *

from xcai.learner import XCDataParallel
from xcai.models.sandwich import EncoderOutput, SAWModelOutput, Parameters

@patch
def forward(
    self:SAW002,
    data_input_ids:Optional[torch.Tensor]=None,
    data_attention_mask:Optional[torch.Tensor]=None,
    lbl2data_data2ptr:Optional[torch.Tensor]=None,
    lbl2data_idx:Optional[torch.Tensor]=None,
    lbl2data_input_ids:Optional[torch.Tensor]=None,
    lbl2data_attention_mask:Optional[torch.Tensor]=None,
    plbl2data_data2ptr:Optional[torch.Tensor]=None,
    plbl2data_idx:Optional[torch.Tensor]=None,
    output_attentions: Optional[bool] = None,
    output_hidden_states: Optional[bool] = None,
    return_dict: Optional[bool] = None,
    **kwargs
): 
    return_dict = return_dict if return_dict is not None else self.config.use_return_dict
    
    if self.config.use_encoder_parallel: 
        encoder = XCDataParallel(module=self.encoder)
    else: encoder = self.encoder
    
    data_meta_kwargs = Parameters.from_aug_meta_prefix_for_feature('data', self.config.data_aug_meta_prefix, **kwargs)
    data_o = encoder(data_input_ids=data_input_ids, data_attention_mask=data_attention_mask, 
                     data_aug_meta_prefix=self.config.data_aug_meta_prefix, data_enrich=self.config.data_enrich, **data_meta_kwargs)
    
    loss = None; lbl2data_o = EncoderOutput()
    if lbl2data_input_ids is not None:
        lbl2data_meta_kwargs = Parameters.from_aug_meta_prefix_for_feature('lbl', self.config.lbl2data_aug_meta_prefix, **kwargs)
        lbl2data_o = encoder(data_input_ids=lbl2data_input_ids, data_attention_mask=lbl2data_attention_mask, 
                             data_aug_meta_prefix=self.config.lbl2data_aug_meta_prefix, data_enrich=self.config.lbl2data_enrich, **lbl2data_meta_kwargs)

        if self.config.data_enrich and self.config.lbl2data_enrich:
            loss = self.compute_loss(data_o.enriched_data_repr, lbl2data_o.enriched_data_repr,lbl2data_data2ptr,lbl2data_idx,
                                     plbl2data_data2ptr,plbl2data_idx)
        elif self.config.data_enrich:
            loss = self.compute_loss(data_o.enriched_data_repr, lbl2data_o.data_repr,lbl2data_data2ptr,lbl2data_idx,
                                     plbl2data_data2ptr,plbl2data_idx)
        elif self.config.lbl2data_enrich:
            loss = self.compute_loss(data_o.data_repr, lbl2data_o.enriched_data_repr,lbl2data_data2ptr,lbl2data_idx,
                                     plbl2data_data2ptr,plbl2data_idx)
        else:
            raise ValueError(f'Either `data_enrich` or `lbl2data_enrich` should be active')

        if self.config.use_query_loss:
            loss += self.compute_loss(data_o.data_repr, lbl2data_o.data_repr, lbl2data_data2ptr, lbl2data_idx, plbl2data_data2ptr, plbl2data_idx)

        if self.config.use_calib_loss:
            if self.config.data_enrich:
                loss += self.calibration_loss(data_o.enriched_data_repr, data_o.data_repr, lbl2data_o.data_repr, 
                        lbl2data_data2ptr, lbl2data_idx, plbl2data_data2ptr, plbl2data_idx)

        if self.config.use_meta_loss:
            loss += self.compute_meta_loss(data_o, lbl2data_o, **kwargs)
        
    if not return_dict:
        o = (data_o.data_repr,data_o.enriched_data_repr,lbl2data_o.data_repr,lbl2data_o.enriched_data_repr)
        return ((loss,) + o) if loss is not None else o
    
    return SAWModelOutput(
        loss=loss,
        data_repr=data_o.data_repr,
        data_enriched_repr=data_o.enriched_data_repr,
        data_data_meta_repr=data_o.data_meta_repr,
        data_meta_repr=data_o.meta_repr,
        lbl2data_repr=lbl2data_o.data_repr,
        lbl2data_enriched_repr=lbl2data_o.enriched_data_repr,
        lbl2data_data_meta_repr=lbl2data_o.data_meta_repr,
        lbl2data_meta_repr=lbl2data_o.meta_repr,
    )

# %% ../nbs/07_sandwich-for-wikiseealsotitles.ipynb 7
if __name__ == '__main__':
    output_dir = '/home/aiscuser/scratch1/outputs/sandwich/07_sandwich-for-wikiseealsotitles-014'

    data_dir = '/data/datasets/benchmarks/'
    config_file = 'wikiseealsotitles'
    config_key = 'data_meta'
    
    mname = 'sentence-transformers/msmarco-distilbert-base-v4'

    meta_name = 'cat'

    input_args = parse_args()

    pkl_file = f'{input_args.pickle_dir}/sandwich/wikiseealsotitles_data-meta_distilbert-base-uncased'
    pkl_file = f'{pkl_file}_sxc' if input_args.use_sxc_sampler else f'{pkl_file}_xcs'
    if input_args.only_test: pkl_file = f'{pkl_file}_only-test'
    pkl_file = f'{pkl_file}.joblib'

    do_inference = input_args.do_train_inference or input_args.do_test_inference or input_args.save_train_prediction or input_args.save_test_prediction or input_args.save_representation

    os.makedirs(os.path.dirname(pkl_file), exist_ok=True)
    block = build_block(pkl_file, config_file, input_args.use_sxc_sampler, config_key, do_build=input_args.build_block, only_test=input_args.only_test, 
                        n_slbl_samples=4, main_oversample=False, n_sdata_meta_samples=1, n_slbl_meta_samples=1, meta_oversample=False, data_dir=data_dir)

    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=512,
        per_device_eval_batch_size=512,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        eval_strategy="steps",
        eval_steps=500,
        save_steps=500,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        adam_epsilon=1e-6,
        warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-5,
        representation_search_type='BRUTEFORCE',
    
        representation_attribute='data_enriched_repr',
        output_representation_attribute='data_enriched_repr',
        label_representation_attribute='data_enriched_repr',
        clustering_representation_attribute='data_enriched_repr',
        data_augmentation_attribute='data_repr',
        metadata_representation_attribute='data_repr',
    
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        use_data_metadata_for_clustering=True,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,

        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
    
        use_distributional_representation=False,
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,
    
        label_names=[f'{meta_name}2data_input_ids', f'{meta_name}2data_attention_mask', f'{meta_name}2data_idx', f'{meta_name}2data_data2ptr', 
            f'p{meta_name}2data_idx', f'p{meta_name}2data_data2ptr', f'{meta_name}2lbl_input_ids', f'{meta_name}2lbl_attention_mask', 
            f'{meta_name}2lbl_idx', f'{meta_name}2lbl_lbl2ptr', f'p{meta_name}2lbl_idx', f'p{meta_name}2lbl_lbl2ptr'],

        data_aug_prefix=meta_name,
        use_label_metadata=True,

        prune_metadata=False,
        num_metadata_prune_warmup_epochs=10,
        num_metadata_prune_epochs=5,
        metadata_prune_batch_size=2048,
        prune_metadata_names=[f'{meta_name}_meta'],
        use_data_metadata_for_pruning=True,
    
        predict_with_augmentation=False,
        use_augmentation_index_representation=True,
    
        data_aug_meta_name=meta_name,
        augmentation_num_beams=None,
    
        data_meta_batch_size=2048,
        augment_metadata=False,
        num_metadata_augment_warmup_epochs=10,
        num_metadata_augment_epochs=5,
    
        use_cpu_for_searching=True,
        use_cpu_for_clustering=True,
    )

    bsz = max(args.per_device_train_batch_size, args.per_device_eval_batch_size)*torch.cuda.device_count()
    
    config = SandwichConfig(
        data_aug_meta_prefix=f'{meta_name}2data', 
        lbl2data_aug_meta_prefix=f'{meta_name}2lbl',
    
        data_enrich=True,
        lbl2data_enrich=True,
    
        batch_size=bsz, 
        num_batch_labels=5000, 
        margin=0.3,
        num_negatives=10,
        tau=0.1,
        apply_softmax=True,
    
        use_calib_loss=True,
        calib_loss_weight=0.1,
        calib_margin=0.05,
        calib_num_negatives=10,
        calib_tau=0.1,
        calib_apply_softmax=False,
    
        use_query_loss=True,
    
        use_meta_loss=True,
        meta_loss_weight=1.0,

        use_encoder_parallel=True,
    )
    
    def model_fn(mname):
        model = SAW002.from_pretrained(mname, config=config)
        return model
    
    def init_fn(model):
        model.init_meta_distilbert()
        model.init_heads_to_identity()
        model.init_combiner_to_identity()

    model = load_model(args.output_dir, model_fn, {"mname": mname}, init_fn, do_inference=do_inference, 
                       use_pretrained=input_args.use_pretrained)

    metric = PrecReclMrr(block.n_lbl, block.test.data_lbl_filterer, prop=block.train.dset.data.data_lbl,
                         pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200], mk=[5, 10, 20])
    
    learn = XCLearner(
        model=model,
        args=args,
        train_dataset=block.train.dset,
        eval_dataset=block.test.dset,
        data_collator=block.collator,
        compute_metrics=metric,
    )
    
    main(learn, input_args, n_lbl=block.n_lbl)

    # linker_block = block.linker_dset('cat_meta', remove_empty=True)
    # metric = PrecReclMrr(linker_block.n_lbl, linker_block.test.data_lbl_filterer, prop=linker_block.train.dset.data.data_lbl,
    #                      pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200], mk=[5, 10, 20])

    # linker_block = block.linker_dset(f'{meta_name}_meta', remove_empty=False)

    # train_dset = block.inference_dset(linker_block.train.dset.data.data_info, linker_block.train.dset.data.data_lbl, linker_block.train.dset.data.lbl_info, 
    #         linker_block.train.dset.data.data_lbl_filterer)
    # test_dset = block.inference_dset(linker_block.test.dset.data.data_info, linker_block.test.dset.data.data_lbl, linker_block.test.dset.data.lbl_info, 
    #         linker_block.test.dset.data.data_lbl_filterer)

    # metric = PrecReclMrr(test_dset.data.n_lbl, test_dset.data.data_lbl_filterer, prop=linker_block.train.dset.data.data_lbl,
    #                      pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200], mk=[5, 10, 20])

    # learn = XCLearner(
    #     model=model,
    #     args=args,
    #     train_dataset=train_dset,
    #     eval_dataset=test_dset,
    #     data_collator=linker_block.collator,
    #     compute_metrics=metric,
    # )

    # main(learn, input_args, n_lbl=test_dset.data.n_lbl, eval_k=10, train_k=10)

