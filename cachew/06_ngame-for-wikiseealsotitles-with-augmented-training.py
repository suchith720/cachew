# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_ngame-for-wikiseealsotitles-with-augmented-training.ipynb.

# %% auto 0
__all__ = ['get_lbl_lbl_metadata', 'get_data_lbl_metadata']

# %% ../nbs/06_ngame-for-wikiseealsotitles-with-augmented-training.ipynb 3
import os
os.environ['CUDA_VISIBLE_DEVICES'] = '0,1'

import torch,json, torch.multiprocessing as mp, joblib, numpy as np, scipy.sparse as sp

from xcai.basics import *
from xcai.models.PPP0XX import DBT009,DBT011

# %% ../nbs/06_ngame-for-wikiseealsotitles-with-augmented-training.ipynb 5
os.environ['WANDB_PROJECT'] = 'cachew_00-wikiseealsotitles'

# %% ../nbs/06_ngame-for-wikiseealsotitles-with-augmented-training.ipynb 23
from tqdm.auto import tqdm

from xcai.sdata import SXCDataset
from xcai.graph.operations import *

# %% ../nbs/06_ngame-for-wikiseealsotitles-with-augmented-training.ipynb 24
def get_lbl_lbl_metadata(block, meta_name:str, batch_size:int=1024, topk:int=10, do_normalize:bool=True):
    if f'{meta_name}_meta' not in block.train.dset.meta: raise ValueError(f'Invalid metadata: {meta_name}')
    
    meta_lbl = block.train.dset.meta[f'{meta_name}_meta'].lbl_meta.transpose().tocsr()
    meta_lbl, lbl_lbl = Graph.one_hop_matrix(meta_lbl, batch_size=batch_size, topk=topk, do_normalize=do_normalize)

    return SXCDataset.get_combined_data_and_meta(block.train.dset, lbl_lbl, block.lbl_info)
    

# %% ../nbs/06_ngame-for-wikiseealsotitles-with-augmented-training.ipynb 25
def get_data_lbl_metadata(block, meta_name:str, batch_size:int=1024):
    if f'{meta_name}_meta' not in block.train.dset.meta: raise ValueError(f'Invalid metadata: {meta_name}')
        
    data_meta = block.train.dset.meta[f'{meta_name}_meta'].data_meta
    meta_lbl = block.train.dset.meta[f'{meta_name}_meta'].lbl_meta.transpose().tocsr()

    data_lbl = sp.vstack([data_meta[i:i+batch_size] @ meta_lbl for i in tqdm(range(0, data_meta.shape[0], batch_size))])
    
    return SXCDataset.get_combined_data_and_meta(block.train.dset, data_lbl, block.train.dset.data.data_info)
    

# %% ../nbs/06_ngame-for-wikiseealsotitles-with-augmented-training.ipynb 35
if __name__ == '__main__':
    output_dir = '/scratch/scai/phd/aiz218323/outputs/cachew/06_ngame-for-wikiseealsotitles-with-augmented-training'

    data_dir = '/home/scai/phd/aiz218323/scratch/datasets/benchmarks/'
    config_file = 'wikiseealsotitles'
    config_key = 'data_meta'
    
    mname = 'sentence-transformers/msmarco-distilbert-base-v4'

    input_args = parse_args()

    pkl_file = f'{input_args.pickle_dir}/cachew/wikiseealsotitles_data-meta_distilbert-base-uncased'
    pkl_file = f'{pkl_file}_sxc' if input_args.use_sxc_sampler else f'{pkl_file}_xcs'
    if input_args.only_test: pkl_file = f'{pkl_file}_only-test'
    pkl_file = f'{pkl_file}.joblib'

    do_inference = input_args.do_train_inference or input_args.do_test_inference or input_args.save_train_prediction or input_args.save_test_prediction or input_args.save_representation

    os.makedirs(os.path.dirname(pkl_file), exist_ok=True)
    block = build_block(pkl_file, config_file, input_args.use_sxc_sampler, config_key, do_build=input_args.build_block, only_test=input_args.only_test, data_dir=data_dir)

    args = XCLearningArguments(
        output_dir=output_dir,
        logging_first_step=True,
        per_device_train_batch_size=800,
        per_device_eval_batch_size=800,
        representation_num_beams=200,
        representation_accumulation_steps=10,
        save_strategy="steps",
        evaluation_strategy="steps",
        eval_steps=5000,
        save_steps=5000,
        save_total_limit=5,
        num_train_epochs=300,
        predict_with_representation=True,
        representation_search_type='BRUTEFORCE',
        adam_epsilon=1e-6,
        warmup_steps=100,
        weight_decay=0.01,
        learning_rate=2e-4,
    
        group_by_cluster=True,
        num_clustering_warmup_epochs=10,
        num_cluster_update_epochs=5,
        num_cluster_size_update_epochs=25,
        clustering_type='EXPO',
        minimum_cluster_size=2,
        maximum_cluster_size=1600,
    
        metric_for_best_model='P@1',
        load_best_model_at_end=True,
        target_indices_key='plbl2data_idx',
        target_pointer_key='plbl2data_data2ptr',
    
        use_encoder_parallel=True,
        max_grad_norm=None,
        fp16=True,
    )

    def model_fn(mname, bsz):
        model = DBT009.from_pretrained(mname, bsz=bsz, tn_targ=5000, margin=0.3, tau=0.1, n_negatives=10, 
                                       apply_softmax=True, use_encoder_parallel=True)
        return model
    
    def init_fn(model): 
        model.init_dr_head()

    metric = PrecReclMrr(block.n_lbl, block.test.data_lbl_filterer, prop=block.train.dset.data.data_lbl,
                         pk=10, rk=200, rep_pk=[1, 3, 5, 10], rep_rk=[10, 100, 200], mk=[5, 10, 20])
    
    bsz = max(args.per_device_train_batch_size, args.per_device_eval_batch_size)*torch.cuda.device_count()

    model = load_model(args.output_dir, model_fn, {"mname": mname, "bsz": bsz}, init_fn, do_inference=do_inference, 
                       use_pretrained=input_args.use_pretrained)

    train_dset = block.train.dset.combined_lbl_and_meta(meta_name='cat', p_data=0.5, use_main_distribution=True, main_oversample=True)
    
    learn = XCLearner(
        model=model,
        args=args,
        train_dataset=train_dset,
        eval_dataset=block.test.dset,
        data_collator=block.collator,
        compute_metrics=metric,
    )
    
    main(learn, input_args, n_lbl=block.n_lbl)
    
